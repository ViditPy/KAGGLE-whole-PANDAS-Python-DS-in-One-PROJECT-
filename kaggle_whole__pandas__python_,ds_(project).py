# -*- coding: utf-8 -*-
"""KAGGLE- WHOLE "PANDAS" Python ,DS (project)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pol4ZUFf17d5sTIMVDqDcFNCfIQa8BR-

This Dataset has been Selected from (https://www.kaggle.com/abcsds/pokemon).

This data set includes 721 Pokemon, including their number, name, first and second type, and basic stats: HP, Attack, Defense, Special Attack, Special Defense, and Speed. It has been of great use when teaching statistics to kids. With certain types you can also give a geeky introduction to machine learning.

This are the raw attributes that are used for calculating how much damage an attack will do in the games. This dataset is about the pokemon games (NOT pokemon cards or Pokemon Go).

In This "DATASET" we are going to use "PANDAS" liberaries inDepth as its the Backbone of DATASCIENCE.
"""

import pandas as pd

df = pd.read_csv('Pokemon.csv')

df.head()

df.columns

df['Name'][0:10]

df.Name

df[['Name','Type 1','HP']]   ## Read each column

df.iloc[1]

df.iloc[1:5]   ## Read each row

df.iloc[5,2]     ## Read a specific Location in (Row,Column)

df.iterrows()

df

df['Name']

df.describe

df.describe()

df.sort_values('Name')

df.sort_values('Name',ascending = False)

df.sort_values(['Type 1', 'HP'])     ## SORTING/DESCRIBING DATA

df.sort_values(['Type 1', 'HP'], ascending = [1,0])

"""MAKING CHANGES TO THE DATA"""

df['Total'] = df['Attack'] + df['Defense'] + df['HP'] + df['Sp. Atk'] + df['Sp. Def'] + df['Speed']

df.head()

df = df.drop(columns=['Total'])
df['Total'] = df.iloc[:,4:9].sum(axis=1)

df[['Total','HP','Defense']]

cols = list(df.columns.values)

df = df[cols[0:4] + [cols[-1]] + cols[4:12]]
df.head(5)

"""SAVING OUR DATA (EXPORTING INTO DESIRED FORMAT)"""

df

"""FILTERING DATA"""

df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison')]

df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison') & (df['HP'] > 70)]

new_df = df.loc[(df['Type 1'] == 'Grass') & (df['Type 2'] == 'Poison') & (df['HP'] > 70)]
new_df.to_csv('filtered.csv')   ## To be noted
new_df = new_df.reset_index()
new_df

new_df = new_df.reset_index(drop=True)
new_df = new_df.reset_index(drop=True,inplace=True)

new_df

df.loc[df['Name'].str.contains('Mega')]    ## Point to be noted

df.loc[~df['Name'].str.contains('Mega')]    ## Point to be noted

import re

df.loc[df['Type 1'].str.contains('fire|grass',regex=True)]    ## Point to be noted

df.loc[df['Type 1'].str.contains('fire|grass',flags = re.I,regex=True)]    ## Point to be noted

df.loc[df['Name'].str.contains('pi[a-z]*',flags = re.I,regex=True)]    ## Point to be noted

"""CONDITIONAL CHANGES"""

df.loc[df['Type 1'] == 'Fire','Type 1'] = 'Flamer'

df

df.loc[df['Type 1'] == 'Flamer','Type 1'] = 'Fire'

df

df.loc[df['Type 1'] == 'Fire','Legendary'] = True

df

df.loc[df['Total'] > 500 ,['Generation','Legendary']] = 'Test Value'

df.loc[df['Type 1'] == 'Flamer','Type 1'] = 'Fire'

df.groupby(['Type 1']).mean()

df.groupby(['Type 1']).sum()

df.groupby(['Type 1']).mean().sort_values('Defense',ascending=True)

df['Count']=1

df.groupby(['Type 1']).count()

df.groupby(['Type 1','Type 2']).count()

df.groupby(['Type 1','Type 2']).count()['Count']

"""To execute the code in the above cell, select it with a click and then either press the play button to the left of the code, or use the keyboard shortcut "Command/Ctrl+Enter". To edit the code, just click the cell and start editing.

Variables that you define in one cell can later be used in other cells:

Colab notebooks allow you to combine **executable code** and **rich text** in a single document, along with **images**, **HTML**, **LaTeX** and more. When you create your own Colab notebooks, they are stored in your Google Drive account. You can easily share your Colab notebooks with co-workers or friends, allowing them to comment on your notebooks or even edit them. To learn more, see [Overview of Colab](/notebooks/basic_features_overview.ipynb). To create a new Colab notebook you can use the File menu above, or use the following link: [create a new Colab notebook](http://colab.research.google.com#create=true).

Colab notebooks are Jupyter notebooks that are hosted by Colab. To learn more about the Jupyter project, see [jupyter.org](https://www.jupyter.org).

## Data science

With Colab you can harness the full power of popular Python libraries to analyze and visualize data. The code cell below uses **numpy** to generate some random data, and uses **matplotlib** to visualize it. To edit the code, just click the cell and start editing.
"""

import numpy as np
from matplotlib import pyplot as plt

ys = 200 + np.random.randn(100)
x = [x for x in range(len(ys))]

plt.plot(x, ys, '-')
plt.fill_between(x, ys, 195, where=(ys > 195), facecolor='g', alpha=0.6)

plt.title("Sample Visualization")
plt.show()

"""You can import your own data into Colab notebooks from your Google Drive account, including from spreadsheets, as well as from Github and many other sources. To learn more about importing data, and how Colab can be used for data science, see the links below under [Working with Data](#working-with-data).

## Machine learning

With Colab you can import an image dataset, train an image classifier on it, and evaluate the model, all in just [a few lines of code](https://colab.research.google.com/github/tensorflow/docs/blob/master/site/en/tutorials/quickstart/beginner.ipynb). Colab notebooks execute code on Google's cloud servers, meaning you can leverage the power of Google hardware, including [GPUs and TPUs](#using-accelerated-hardware), regardless of the power of your machine. All you need is a browser.

Colab is used extensively in the machine learning community with applications including:
- Getting started with TensorFlow
- Developing and training neural networks
- Experimenting with TPUs
- Disseminating AI research
- Creating tutorials

To see sample Colab notebooks that demonstrate machine learning applications, see the [machine learning examples](#machine-learning-examples) below.

## More Resources

### Working with Notebooks in Colab
- [Overview of Colaboratory](/notebooks/basic_features_overview.ipynb)
- [Guide to Markdown](/notebooks/markdown_guide.ipynb)
- [Importing libraries and installing dependencies](/notebooks/snippets/importing_libraries.ipynb)
- [Saving and loading notebooks in GitHub](https://colab.research.google.com/github/googlecolab/colabtools/blob/master/notebooks/colab-github-demo.ipynb)
- [Interactive forms](/notebooks/forms.ipynb)
- [Interactive widgets](/notebooks/widgets.ipynb)
- <img src="/img/new.png" height="20px" align="left" hspace="4px" alt="New"></img>
 [TensorFlow 2 in Colab](/notebooks/tensorflow_version.ipynb)

<a name="working-with-data"></a>
### Working with Data
- [Loading data: Drive, Sheets, and Google Cloud Storage](/notebooks/io.ipynb) 
- [Charts: visualizing data](/notebooks/charts.ipynb)
- [Getting started with BigQuery](/notebooks/bigquery.ipynb)

### Machine Learning Crash Course
These are a few of the notebooks from Google's online Machine Learning course. See the [full course website](https://developers.google.com/machine-learning/crash-course/) for more.
- [Intro to Pandas](/notebooks/mlcc/intro_to_pandas.ipynb)
- [Tensorflow concepts](/notebooks/mlcc/tensorflow_programming_concepts.ipynb)
- [First steps with TensorFlow](/notebooks/mlcc/first_steps_with_tensor_flow.ipynb)
- [Intro to neural nets](/notebooks/mlcc/intro_to_neural_nets.ipynb)
- [Intro to sparse data and embeddings](/notebooks/mlcc/intro_to_sparse_data_and_embeddings.ipynb)

<a name="using-accelerated-hardware"></a>
### Using Accelerated Hardware
- [TensorFlow with GPUs](/notebooks/gpu.ipynb)
- [TensorFlow with TPUs](/notebooks/tpu.ipynb)

<a name="machine-learning-examples"></a>

## Machine Learning Examples

To see end-to-end examples of the interactive machine learning analyses that Colaboratory makes possible, check out the [AI Hub](https://aihub.cloud.google.com/) project.

A few featured examples:

- [Neural Style Transfer](https://aihub.cloud.google.com/p/products%2F7f7495dd-6f66-4f8a-8c30-15f211ad6957): Use deep learning to transfer style between images.
- [EZ NSynth](https://aihub.cloud.google.com/p/products%2Fcddd17cf-5f86-4ce7-b6b6-03c5e52ee0fb): Synthesize audio with WaveNet auto-encoders.
- [Fashion MNIST with Keras and TPUs](https://aihub.cloud.google.com/p/products%2F7a0acf15-0be0-41a6-9bdb-5a5abd4e8fbf): Classify fashion-related images with deep learning.
- [DeepDream](https://aihub.cloud.google.com/p/products%2Ff9e8fc11-ad0f-410a-bebe-2482066ce570): Produce DeepDream images from your own photos.
- [Convolutional VAE](https://aihub.cloud.google.com/p/products%2Ff5e8dd20-6b34-44a0-bc45-6e345e36a4e7): Create a generative model of handwritten digits.
"""